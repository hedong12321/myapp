<?xml version="1.0" encoding="UTF-8"?>

<!-- - Application context definition for JPetStore's business layer. - Contains 
    bean references to the transaction manager and to the DAOs in - dataAccessContext-local/jta.xml 
    (see web.xml's "contextConfigLocation"). -->
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
    xmlns:context="http://www.springframework.org/schema/context"
    xmlns:aop="http://www.springframework.org/schema/aop"
    xmlns:tx="http://www.springframework.org/schema/tx"
    xsi:schemaLocation="http://www.springframework.org/schema/beans
           http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
           http://www.springframework.org/schema/aop 
           http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
           http://www.springframework.org/schema/tx
           http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
           http://www.springframework.org/schema/context
           http://www.springframework.org/schema/context/spring-context-3.0.xsd">

    <!-- 数据库配置文件位置 -->
    <context:property-placeholder location="classpath:jdbc.properties" />
    
    <context:component-scan base-package="com.hed.myapp" />
    
    <!-- 数据源 -->
    <!-- 
    <bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource"> 
        <property name="driverClassName" value="com.mysql.jdbc.Driver"></property> 
        <property name="url" value="jdbc:mysql://localhost:3306/sshTest"></property> 
        <property name="username" value="root"></property> 
        <property name="password" value="H654987d"></property> 
    </bean> 
    -->


    <bean id="dataSource"
        class="org.springframework.jdbc.datasource.DriverManagerDataSource">
        <property name="driverClassName" value="${jdbc.driverClassName}" />
        <property name="url" value="${jdbc.url}" />
        <property name="username" value="${jdbc.username}" />
        <property name="password" value="${jdbc.password}" />
        <!-- 队列中的最小等待数 -->
        <!-- <property name="minIdle" value="${jdbc.minIdle}"></property> -->
        <!-- 队列中的最大等待数 -->
        <!-- <property name="maxIdle" value="${jdbc.maxIdle}"></property> -->
        <!-- 最长等待时间，单位毫秒 -->
        <!-- <property name="maxWait" value="${jdbc.maxWait}"></property> -->
        <!-- 最大活跃数 -->
        <!-- <property name="maxActive" value="${jdbc.maxActive}"></property>
        <property name="initialSize" value="${jdbc.initialSize}"></property> -->
    </bean>

    <!-- 创建sessionFactory -->
    <bean id="sessionFactory" 
        class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
        <property name="dataSource" ref="dataSource" />
        <!-- <property name="annotatedClasses">
            <list>
                <value>com.hed.myapp.entity.Tree</value>
            </list>
        </property> -->
        <property name="packagesToScan">
            <!-- 多个包用逗号分割 -->
            <value>com.hed.myapp.entity</value>
        </property>
        <property name="hibernateProperties">
            <value>
                hibernate.dialect=org.hibernate.dialect.PostgreSQL82Dialect
                hibernate.show_sql=true
            </value>
        </property>
    </bean>
    
    <!-- 事务相关设置 -->
    <bean id="transactionManager" class="org.springframework.orm.hibernate4.HibernateTransactionManager">
        <property name="sessionFactory" ref="sessionFactory" />
    </bean>

    <tx:annotation-driven transaction-manager="transactionManager" />
    
    <!-- 创建一个流程引擎的配置对象你不用管这个是什么意思 这个是死的这就是配置这个就是所谓activiti的引擎 现在你已经制造他了 -->
    <bean id="processEngineConfiguration" class="org.activiti.spring.SpringProcessEngineConfiguration">
        <!--这里是数据源的指定 指向你自己的dataSource -->
        <property name="dataSource" ref="dataSource" />
        <property name="transactionManager" ref="transactionManager" />
        <!-- 设置数据库schema的更新方式 -->
        <property name="databaseSchemaUpdate" value="true" />
        <!-- 是否启动jobExecutor -->
        <property name="jobExecutorActivate" value="false" />

        <!-- 自动部署就是自己自动部署流程 意思就是 我本来没流程啊 怎么多出来的流程 就是在这里 自动部署的，流程只有部署了 用户才可以走这个流程 -->
        <property name="deploymentResources">
            <list>
                <value>classpath*:/deployments/*</value>
            </list>
        </property>
        <!-- 
                          指定匹配多个资源时的发布处理方式:
             default,把所有资源放在一个单独的发布包中，对这个发布包进行重复检测;
             single-resource,为每个单独的资源创建一个发布包，并对这些发布包进行重复检测
             resource-parent-folder,把放在同一个上级目录下的资源发布在一个单独的发布包中，并对发布包进行重复检测
         -->
        <property name="deploymentMode" value="single-resource" />
        <!-- 自定义表单字段类型 这个很重要 很重要 你不用明白他是什么意思 他就是必须的 自己在自己的项目里加上这个类然后指向他 -->
        <property name="customFormTypes">
            <list>
                <bean class="com.hed.myapp.customformfield.UserFormType" />
            </list>
        </property>
    </bean>

    <bean id="processEngine" class="org.activiti.spring.ProcessEngineFactoryBean">
        <property name="processEngineConfiguration" ref="processEngineConfiguration" />
    </bean>
    
    <bean id="repositoryService" factory-bean="processEngine" factory-method="getRepositoryService"/>
    <bean id="runtimeService" factory-bean="processEngine" factory-method="getRuntimeService"/>
    <bean id="formService" factory-bean="processEngine" factory-method="getFormService"/>
    <bean id="identityService" factory-bean="processEngine" factory-method="getIdentityService"/>
    <bean id="taskService" factory-bean="processEngine" factory-method="getTaskService"/>
    <bean id="historyService" factory-bean="processEngine" factory-method="getHistoryService"/>
    <bean id="managementService" factory-bean="processEngine" factory-method="getManagementService"/>

</beans>
